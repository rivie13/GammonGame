#constant vars
WHITE = (255, 255, 255)
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
BOARD_COLOR = (205, 133, 63)
POINT_COLOR_1 = (139, 69, 19)
POINT_COLOR_2 = (222, 184, 135)
CHECKER_COLOR_WHITE = (255, 255, 255)
CHECKER_COLOR_BLACK = (0, 0, 0)
POINT_WIDTH = 64
POINT_HEIGHT = 200
BAR_WIDTH = 30

CHIP_STACK_SIZE = 25

#marks where the first piece should be at on any of the points
#on the board
POINTS_POSITIONS_DICT = {
    #point 1 is bottom right of the screen...
    #bottom right is max x and max y value...
    #points are a whole n - 1 triangles width plus 32
    1: (SCREEN_WIDTH - (POINT_WIDTH//2), SCREEN_HEIGHT - CHIP_STACK_SIZE),
    2: (SCREEN_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH, SCREEN_HEIGHT - CHIP_STACK_SIZE),
    3: (SCREEN_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 2, SCREEN_HEIGHT - CHIP_STACK_SIZE),
    4: (SCREEN_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 3, SCREEN_HEIGHT - CHIP_STACK_SIZE),
    5: (SCREEN_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 4, SCREEN_HEIGHT - CHIP_STACK_SIZE),
    6: (SCREEN_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 5, SCREEN_HEIGHT - CHIP_STACK_SIZE),
    #remember bar for 7
    7: (SCREEN_WIDTH - BAR_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 6, SCREEN_HEIGHT - CHIP_STACK_SIZE),
    8: (SCREEN_WIDTH - BAR_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 7, SCREEN_HEIGHT - CHIP_STACK_SIZE),
    9: (SCREEN_WIDTH - BAR_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 8, SCREEN_HEIGHT - CHIP_STACK_SIZE),
    10: (SCREEN_WIDTH - BAR_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 9, SCREEN_HEIGHT - CHIP_STACK_SIZE),
    11: (SCREEN_WIDTH - BAR_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 10, SCREEN_HEIGHT - CHIP_STACK_SIZE),
    12: (SCREEN_WIDTH - BAR_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 11, SCREEN_HEIGHT - CHIP_STACK_SIZE),
    #start of the top... lowest y lowest x
    13: ((POINT_WIDTH//2), CHIP_STACK_SIZE),
    14: ((POINT_WIDTH//2) + POINT_WIDTH, CHIP_STACK_SIZE),
    15: ((POINT_WIDTH//2) + POINT_WIDTH * 2, CHIP_STACK_SIZE),
    16: ((POINT_WIDTH//2) + POINT_WIDTH * 3, CHIP_STACK_SIZE),
    17: ((POINT_WIDTH//2) + POINT_WIDTH * 4, CHIP_STACK_SIZE),
    18: ((POINT_WIDTH//2) + POINT_WIDTH * 5, CHIP_STACK_SIZE),
    #remember bar for 19
    19: ((POINT_WIDTH//2) + POINT_WIDTH * 6 + BAR_WIDTH, CHIP_STACK_SIZE),
    20: ((POINT_WIDTH//2) + POINT_WIDTH * 7 + BAR_WIDTH, CHIP_STACK_SIZE),
    21: ((POINT_WIDTH//2) + POINT_WIDTH * 8 + BAR_WIDTH, CHIP_STACK_SIZE),
    22: ((POINT_WIDTH//2) + POINT_WIDTH * 9 + BAR_WIDTH, CHIP_STACK_SIZE),
    23: ((POINT_WIDTH//2) + POINT_WIDTH * 10 + BAR_WIDTH, CHIP_STACK_SIZE),
    #max width and lowest y
    24: ((POINT_WIDTH//2) + POINT_WIDTH * 11 + BAR_WIDTH, CHIP_STACK_SIZE)
}

#create a starting positions dictionary
#dictionary will hold the 30 pieces and will hold their specific place
#will be used in Game class to set up start of game always...for now...

CHECKERS_STARTING_POSITIONS = {
    #first color pieces
    #pos 1 stack
    1: (SCREEN_WIDTH - (POINT_WIDTH//2), SCREEN_HEIGHT - CHIP_STACK_SIZE),
    2: (SCREEN_WIDTH - (POINT_WIDTH//2), SCREEN_HEIGHT - CHIP_STACK_SIZE * 2 - 25),
    #pos 12 stack
    3: (SCREEN_WIDTH - BAR_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 11, SCREEN_HEIGHT - CHIP_STACK_SIZE),
    4: (SCREEN_WIDTH - BAR_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 11, SCREEN_HEIGHT - CHIP_STACK_SIZE * 2 - 25 ),
    5: (SCREEN_WIDTH - BAR_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 11, SCREEN_HEIGHT - CHIP_STACK_SIZE * 3 - 25 * 2),
    6: (SCREEN_WIDTH - BAR_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 11, SCREEN_HEIGHT - CHIP_STACK_SIZE * 4 - 25 * 3),
    7: (SCREEN_WIDTH - BAR_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 11, SCREEN_HEIGHT - CHIP_STACK_SIZE * 5 - 25 * 4),
    #pos 17 stack
    8: ((POINT_WIDTH//2) + POINT_WIDTH * 4, CHIP_STACK_SIZE),
    9: ((POINT_WIDTH//2) + POINT_WIDTH * 4, CHIP_STACK_SIZE * 2 + 25 ),
    10: ((POINT_WIDTH//2) + POINT_WIDTH * 4, CHIP_STACK_SIZE * 3 + 25 * 2),
    #pos 19 stack
    11: ((POINT_WIDTH//2) + POINT_WIDTH * 6 + BAR_WIDTH, CHIP_STACK_SIZE),
    12: ((POINT_WIDTH//2) + POINT_WIDTH * 6 + BAR_WIDTH, CHIP_STACK_SIZE * 2 + 25 ),
    13: ((POINT_WIDTH//2) + POINT_WIDTH * 6 + BAR_WIDTH, CHIP_STACK_SIZE * 3 + 25 * 2),
    14: ((POINT_WIDTH//2) + POINT_WIDTH * 6 + BAR_WIDTH, CHIP_STACK_SIZE * 4 + 25 * 3),
    15: ((POINT_WIDTH//2) + POINT_WIDTH * 6 + BAR_WIDTH, CHIP_STACK_SIZE * 5 + 25 * 4),
    #other color pieces
    #pos 24 pieces
    16: ((POINT_WIDTH//2) + POINT_WIDTH * 11 + BAR_WIDTH, CHIP_STACK_SIZE),
    17: ((POINT_WIDTH//2) + POINT_WIDTH * 11 + BAR_WIDTH, CHIP_STACK_SIZE * 2 + 25),
    #pos 13 pieces
    18: ((POINT_WIDTH//2), CHIP_STACK_SIZE),
    19: ((POINT_WIDTH//2), CHIP_STACK_SIZE * 2 + 25 ),
    20: ((POINT_WIDTH//2), CHIP_STACK_SIZE * 3 + 25 * 2),
    21: ((POINT_WIDTH//2), CHIP_STACK_SIZE * 4 + 25 * 3),
    22: ((POINT_WIDTH//2), CHIP_STACK_SIZE * 5 + 25 * 4),
    #pos 8 pieces
    23: (SCREEN_WIDTH - BAR_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 7, SCREEN_HEIGHT - CHIP_STACK_SIZE),
    24: (SCREEN_WIDTH - BAR_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 7, SCREEN_HEIGHT - CHIP_STACK_SIZE * 2 - 25 ),
    25: (SCREEN_WIDTH - BAR_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 7, SCREEN_HEIGHT - CHIP_STACK_SIZE * 3 - 25 * 2),
    #pos 6 pieces
    26: (SCREEN_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 5, SCREEN_HEIGHT - CHIP_STACK_SIZE),
    27: (SCREEN_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 5, SCREEN_HEIGHT - CHIP_STACK_SIZE * 2 - 25),
    28: (SCREEN_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 5, SCREEN_HEIGHT - CHIP_STACK_SIZE * 3 - 25 * 2),
    29: (SCREEN_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 5, SCREEN_HEIGHT - CHIP_STACK_SIZE * 4 - 25 * 3),
    30: (SCREEN_WIDTH - (POINT_WIDTH//2) - POINT_WIDTH * 5, SCREEN_HEIGHT - CHIP_STACK_SIZE * 5 - 25 * 4)
}
